// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Member {
  id           String   @id @default(uuid())
  membershipId String
  // recrutmentId String
  // 
  email        String   @unique
  password     String
  bestEmail    String?
  // 
  surname      String
  fullName     String
  middleName   String
  birthday     DateTime
  // 
  group        String
  faculty      String
  // 
  clothingSize String?
  homeAddress  String?
  // 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // info about member
  memberPhone         MemberPhone[]
  memberSocialNetwork MemberSocialNetwork[]
  memberEmail         MemberEmail[]

  // LGA
  membership          Membership            @relation(fields: [membershipId], references: [id])
  translation         Translation[]
  boardToMember       BoardToMember[]
  coordinatorToMember CoordinatorToMember[]
}

//* ----------------  info about member  ---------------- *//

model MemberPhone {
  id        String   @id @default(uuid())
  memberId  String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id])
}

model MemberEmail {
  id        String   @id @default(uuid())
  memberId  String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id])
}

model MemberSocialNetwork {
  id        String   @id @default(uuid())
  memberId  String
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id])
}

// 
// LGA
// 

model Meeting {
  id        String   @id @default(uuid())
  cadenceId String
  name      String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  translation Translation[]
  cadence     Cadence       @relation(fields: [cadenceId], references: [id])
}

model Cadence {
  id        String   @id @default(uuid())
  number    Int      @unique
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting             Meeting[]
  boardToMember       BoardToMember[]
  coordinatorToMember CoordinatorToMember[]
}

//* ----------------  translation  ---------------- *//

model Membership {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  translation Translation[]
  member      Member[]
}

model Translation {
  id           String   @id @default(uuid())
  meetingId    String
  membershipId String
  memberId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  meeting    Meeting    @relation(fields: [meetingId], references: [id])
  membership Membership @relation(fields: [membershipId], references: [id])
  member     Member     @relation(fields: [memberId], references: [id])
}

//* ----------------  board  ---------------- *//

model Board {
  id                String   @id @default(uuid())
  name              String   @unique
  isActive          Boolean
  committeeIsActive Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  boardToMember BoardToMember[]
}

model BoardToMember {
  id        String   @id @default(uuid())
  cadenceId String
  boardId   String
  memberId  String
  isLeader  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board   Board   @relation(fields: [boardId], references: [id])
  member  Member  @relation(fields: [memberId], references: [id])
  cadence Cadence @relation(fields: [cadenceId], references: [id])
}

//* ----------------  coordinator  ---------------- *//

model Coordinator {
  id                String   @id @default(uuid())
  name              String   @unique
  isActive          Boolean
  committeeIsActive Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  coordinatorToMember CoordinatorToMember[]
}

model CoordinatorToMember {
  id            String   @id @default(uuid())
  cadenceId     String
  coordinatorId String
  memberId      String
  isLeader      Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  coordinator Coordinator @relation(fields: [coordinatorId], references: [id])
  member      Member      @relation(fields: [memberId], references: [id])
  cadence     Cadence     @relation(fields: [cadenceId], references: [id])
}

// 
// EVENT
// 

model Panish {
  id          String   @id @default(uuid())
  name        String
  description String
  event       String
  special     Boolean
  eventDate   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PhotoAlbum {
  id        String   @id @default(uuid())
  name      String
  url       String
  eventDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
