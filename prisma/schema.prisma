// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model member {
  id            String   @id @default(uuid())
  membership_id String
  // recrutment_id String
  // 
  email         String   @unique
  password      String
  best_email    String?
  // 
  surname       String
  full_name     String
  middle_name   String
  birthday      DateTime
  // 
  group         String
  faculty       String
  // 
  clothing_size String?
  home_address   String?
  // 
  create_date   DateTime @default(now())
  last_edit     DateTime @updatedAt

  // info about member
  member_phone          member_phone[]
  member_social_network member_social_network[]
  member_email          member_email[]

  // LGA
  membership            membership              @relation(fields: [membership_id], references: [id])
  translation           translation[]
  member_to_board       member_to_board[]
  member_to_coordinator member_to_coordinator[]
}

//* ----------------  info about member  ---------------- *//

model member_phone {
  id          String   @id @default(uuid())
  member_id   String
  phone       String
  create_date DateTime @default(now())
  last_edit   DateTime @updatedAt

  member member @relation(fields: [member_id], references: [id])
}

model member_email {
  id          String   @id @default(uuid())
  member_id   String
  email       String
  create_date DateTime @default(now())
  last_edit   DateTime @updatedAt

  member member @relation(fields: [member_id], references: [id])
}

model member_social_network {
  id          String   @id @default(uuid())
  member_id   String
  name        String
  url         String
  create_date DateTime @default(now())
  last_edit   DateTime @updatedAt

  member member @relation(fields: [member_id], references: [id])
}

// 
// LGA
// 

model meeting {
  id          String   @id @default(uuid())
  cadence_id  String
  name        String
  date        DateTime
  create_date DateTime @default(now())
  last_edit   DateTime @updatedAt

  translation translation[]
  cadence     cadence       @relation(fields: [cadence_id], references: [id])
}

model cadence {
  id          String   @id @default(uuid())
  number      Int
  start_date  DateTime
  end_date    DateTime
  create_date DateTime @default(now())
  last_edit   DateTime @updatedAt

  meeting               meeting[]
  member_to_board       member_to_board[]
  member_to_coordinator member_to_coordinator[]
}

//* ----------------  translation  ---------------- *//

model membership {
  id          String   @id @default(uuid())
  name        String   @unique
  create_date DateTime @default(now())
  last_edit   DateTime @updatedAt

  translation translation[]
  member      member[]
}

model translation {
  id            String   @id @default(uuid())
  meeting_id    String
  membership_id String
  member_id     String
  create_date   DateTime @default(now())
  last_edit     DateTime @updatedAt

  meeting    meeting    @relation(fields: [meeting_id], references: [id])
  membership membership @relation(fields: [membership_id], references: [id])
  member     member     @relation(fields: [member_id], references: [id])
}

//* ----------------  board  ---------------- *//

model board {
  id                  String   @id @default(uuid())
  name                String   @unique
  is_active           Boolean
  committee_is_active Boolean
  create_date         DateTime @default(now())
  last_edit           DateTime @updatedAt

  member_to_board member_to_board[]
}

model member_to_board {
  id          String   @id @default(uuid())
  cadence_id  String
  board_id    String
  member_id   String
  is_leader   Boolean
  create_date DateTime @default(now())
  last_edit   DateTime @updatedAt

  board   board   @relation(fields: [board_id], references: [id])
  member  member  @relation(fields: [member_id], references: [id])
  cadence cadence @relation(fields: [cadence_id], references: [id])
}

//* ----------------  coordinator  ---------------- *//

model coordinator {
  id                  String   @id @default(uuid())
  name                String   @unique
  is_active           Boolean
  committee_is_active Boolean
  create_date         DateTime @default(now())
  last_edit           DateTime @updatedAt

  member_to_coordinator member_to_coordinator[]
}

model member_to_coordinator {
  id             String   @id @default(uuid())
  cadence_id     String
  coordinator_id String
  member_id      String
  is_leader      Boolean
  create_date    DateTime @default(now())
  last_edit      DateTime @updatedAt

  coordinator coordinator @relation(fields: [coordinator_id], references: [id])
  member      member      @relation(fields: [member_id], references: [id])
  cadence     cadence     @relation(fields: [cadence_id], references: [id])
}

// 
// EVENT
// 

model panish {
  id          String   @id @default(uuid())
  name        String
  description String
  event       String
  special     Boolean
  event_date  DateTime
  create_date DateTime @default(now())
  last_edit   DateTime @updatedAt
}

model photo_album {
  id          String   @id @default(uuid())
  name        String
  url         String
  event_date  DateTime
  create_date DateTime @default(now())
  last_edit   DateTime @updatedAt
}
