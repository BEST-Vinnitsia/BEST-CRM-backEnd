// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//
//* ----------------  member  ---------------- *//
//

model Member {
  id            Int      @id @default(autoincrement())
  membership    String
  login         String   @unique
  password      String
  bestEmail     String?
  email         String
  phone         String
  socialNetwork String
  name          String
  surname       String
  middleName    String
  birthday      DateTime
  group         String
  faculty       String
  clothingSize  String?
  homeAddress   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  refreshToken        RefreshToken[]
  increase            Increase[]
  boardToMember       BoardToMember[]
  coordinatorToMember CoordinatorToMember[]
  committeeToMember   CommitteeToMember[]
  newEventToMember    NewEventToMember[]
}

//
//* ----------------  cadence  ---------------- *//
//

model Cadence {
  id        Int       @id @default(autoincrement())
  number    Int       @unique
  isEnd     Boolean   @default(false)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  meeting             Meeting[]
  boardToMember       BoardToMember[]
  coordinatorToMember CoordinatorToMember[]
  committeeToMember   CommitteeToMember[]
  newEvent            NewEvent[]
}

//
//* ----------------  meeting  ---------------- *//
//

model Meeting {
  id        Int      @id @default(autoincrement())
  cadenceId Int
  name      String
  type      String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  increase Increase[]
  cadence  Cadence    @relation(fields: [cadenceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model Increase {
  id         Int      @id @default(autoincrement())
  meetingId  Int
  memberId   Int
  membership String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  board  ---------------- *//

model Board {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  fullName  String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boardToMember BoardToMember[]
}

model BoardToMember {
  id           Int       @id @default(autoincrement())
  memberId     Int
  boardId      Int
  cadenceId    Int
  excluded     Boolean   @default(false)
  excludedDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  board   Board   @relation(fields: [boardId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  cadence Cadence @relation(fields: [cadenceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  coordinator  ---------------- *//

model Coordinator {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  fullName  String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coordinatorToMember CoordinatorToMember[]
}

model CoordinatorToMember {
  id            Int       @id @default(autoincrement())
  memberId      Int
  coordinatorId Int
  cadenceId     Int
  excluded      Boolean   @default(false)
  excludedDate  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  coordinator Coordinator @relation(fields: [coordinatorId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  member      Member      @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  cadence     Cadence     @relation(fields: [cadenceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  committee  ---------------- *//

model Committee {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  fullName  String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  committeeToMember CommitteeToMember[]
}

model CommitteeToMember {
  id           Int       @id @default(autoincrement())
  memberId     Int
  committeeId  Int
  cadenceId    Int
  isLeader     Boolean   @default(false)
  excluded     Boolean   @default(false)
  excludedDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  committee Committee @relation(fields: [committeeId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  cadence   Cadence   @relation(fields: [cadenceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  event  ---------------- *//

model Event {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  fullName  String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  responsible Responsible[]
  newEvent    NewEvent[]
}

model NewEvent {
  id        Int      @id @default(autoincrement())
  eventId   Int
  cadenceId Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  newEventToMember NewEventToMember[]
  event            Event              @relation(fields: [eventId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  cadence          Cadence            @relation(fields: [cadenceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model Responsible {
  id          Int      @id @default(autoincrement())
  eventId     Int
  name        String
  fullName    String
  isActive    Boolean
  role        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  newEventToMember NewEventToMember[]
  event            Event              @relation(fields: [eventId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model NewEventToMember {
  id            Int       @id @default(autoincrement())
  newEventId    Int
  responsibleId Int
  memberId      Int
  excluded      Boolean
  excludedDate  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  newEvent    NewEvent    @relation(fields: [newEventId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  responsible Responsible @relation(fields: [responsibleId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  member      Member      @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  auth  ---------------- *//

model RefreshToken {
  id         Int      @id @default(autoincrement())
  memberId   Int
  needUpdate Boolean  @default(false)
  userData   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  other  ---------------- *//

model Panish {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  event       String
  special     Boolean
  eventDate   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PhotoAlbum {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  eventDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
