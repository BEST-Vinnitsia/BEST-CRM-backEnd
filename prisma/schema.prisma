// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

//
//* ----------------  member  ---------------- *//
//

model Member {
  id           String   @id @default(uuid())
  membership   String
  //
  login        String   @unique
  password     String
  //
  bestEmail    String?
  // 
  surname      String
  fullName     String
  middleName   String
  birthday     DateTime
  // 
  group        String
  faculty      String
  // 
  clothingSize String?
  homeAddress  String?
  // 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  //
  refreshToken        RefreshToken[]
  phone               MemberPhone[]
  email               MemberEmail[]
  socialNetwork       MemberSocialNetwork[]
  increase            Increase[]
  boardToMember       BoardToMember[]
  coordinatorToMember CoordinatorToMember[]
  committeeToMember   CommitteeToMember[]
}

model MemberPhone {
  id       String  @id @default(uuid())
  memberId String
  phone    String
  isMain   Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model MemberEmail {
  id       String  @id @default(uuid())
  memberId String
  email    String
  isMain   Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model MemberSocialNetwork {
  id       String  @id @default(uuid())
  memberId String
  name     String
  url      String
  isMain   Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//
//* ----------------  cadence  ---------------- *//
//

model Cadence {
  id        String   @id @default(uuid())
  number    Int      @unique
  isEnd     Boolean
  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting             Meeting[]
  boardToMember       BoardToMember[]
  coordinatorToMember CoordinatorToMember[]
  committeeToMember   CommitteeToMember[]
}

//
//* ----------------  meeting  ---------------- *//
//

model Meeting {
  id        String   @id @default(uuid())
  cadenceId String
  name      String
  date      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  increase Increase[]
  cadence  Cadence    @relation(fields: [cadenceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model Increase {
  id        String   @id @default(uuid())
  meetingId String
  memberId  String
  date      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  board  ---------------- *//

model Board {
  id       String  @id @default(uuid())
  name     String  @unique
  isActive Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boardToMember BoardToMember[]
}

model BoardToMember {
  id          String    @id @default(uuid())
  memberId    String
  boardId     String
  cadenceId   String
  excluded     Boolean   @default(false)
  excludedDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board   Board   @relation(fields: [boardId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  cadence Cadence @relation(fields: [cadenceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  coordinator  ---------------- *//

model Coordinator {
  id       String  @id @default(uuid())
  name     String  @unique
  isActive Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coordinatorToMember CoordinatorToMember[]
}

model CoordinatorToMember {
  id            String    @id @default(uuid())
  memberId      String
  coordinatorId String
  cadenceId     String
  excluded       Boolean   @default(false)
  excludedDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coordinator Coordinator @relation(fields: [coordinatorId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  member      Member      @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  cadence     Cadence     @relation(fields: [cadenceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  committee  ---------------- *//

model Committee {
  id       String  @id @default(uuid())
  name     String  @unique
  isActive Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  committeeToMember CommitteeToMember[]
}

model CommitteeToMember {
  id          String    @id @default(uuid())
  memberId    String
  committeeId String
  cadenceId   String
  isLeader    Boolean   @default(false)
  excluded     Boolean   @default(false)
  excludedDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  committee Committee @relation(fields: [committeeId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  cadence   Cadence   @relation(fields: [cadenceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  auth  ---------------- *//

model RefreshToken {
  id         String  @id @default(uuid())
  memberId   String
  needUpdate Boolean @default(false)
  userData   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

//* ----------------  other  ---------------- *//

model Panish {
  id          String   @id @default(uuid())
  name        String
  description String
  event       String
  special     Boolean
  eventDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhotoAlbum {
  id        String   @id @default(uuid())
  name      String
  url       String
  eventDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
